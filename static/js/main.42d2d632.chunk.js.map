{"version":3,"sources":["components/Legend/Legend.js","hooks/useResizeObserver.js","components/PieChart/PieChart.js","functions/filterDCData.js","functions/filterAndrewData.js","components/GeoChart/DropShadow.js","components/GeoChart/GeoChart.js","components/StackedBarGraph/AnimatedStackedBarGraph.js","components/StackedBarGraph/FilterButtons.js","components/StackedBarGraph/StackedBarGraph.js","components/LineGraph/LineGraph.js","components/Sidebar/Sidebar.js","App.js","functions/formatData.js","serviceWorker.js","index.js","data/Andrew/mass_shootings.csv","data/Andrew/culpritDemographics.csv","data/Andrew/militaryShooters.csv","data/DC/victimsPerState.csv","data/DC/targetsFrequency.csv","data/DC/closeOpenSpaces.csv","data/Tom/numMassShootings.csv"],"names":["Legend","keys","colors","className","map","key","i","capitalisedKey","charAt","toUpperCase","substring","style","backgroundColor","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observerTarget","current","resizedObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","PieChart","chartId","chartAlign","pieChartData","innerRadius","outerRadius","pieChartRef","useRef","wrapperRef","pieChartKeys","Object","pieChartValues","values","svg","select","length","undefined","arcGenerator","arc","instructions","pie","pieGenerator","colorScale","scaleOrdinal","domain","range","selectAll","data","join","attr","instruction","value","width","height","on","console","log","labelIndex","upperCaseLetter","restOfWord","document","getElementById","textContent","href","target","rel","id","bindVictimsData","updatedData","victims","state","properties","NAME","shootings","fatalities","injuries","policemenKilled","totalVictims","bindTargetsData","targets","countDemographicFrequency","shootingsForYear","currentYear","demographics","year","kidsAndTeenagers","youngAdults","adults","middleAged","shooting","age","Age","updateGeoJsonData","geoJson","features","bindDCDataToGeoJson","filterStackedBarGraph","property","startOfRange","endOfRange","filter","object","countMentalHealthFrequency","mentalHealthData","mentalIllnesses","actsOfTerrorism","psychologicalFactors","anger","frustration","unknown","Cause","DropShadow","stdDeviation","slope","in","dx","dy","result","type","GeoChart","victimsPerState","targetsPerState","isTargetsOptionSelected","selectedTargetIndex","geoChartRef","selectedCountry","setSelectedCountry","updatedFeaturesData","getBoundingClientRect","minProp","min","feature","maxProp","max","maxPropTargets","scaleLinear","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","displayTooltip","tooltip","addEventListener","e","x","clientX","y","clientY","left","top","targetsText","number","replace","toLowerCase","setTooltipText","transition","duration","targetValue","setFillOfMap","AnimatedStackedBarGraph","stackedBarGraphData","startValue","setStartValue","endValue","setEndValue","stackedGraphRef","dataForGraph","layers","stack","stackGenerator","yAxisRange","layer","sequence","xScale","scaleBand","padding","yScale","xAxis","axisBottom","call","yAxis","axisLeft","bandwidth","onChange","FilterButtons","keysState","keysArray","setKeysArray","onCheckboxChange","checked","includes","htmlFor","StackedBarGraph","space","parseFloat","Number","toFixed","LineGraph","lineGraphData","yAxisMax","reverseData","xAxisFontSize","svgRef","reverse","ticks","tickFormat","index","axisRight","myLine","line","Sidebar","class","App","setVictimsPerState","setTargetsPerState","setProperty","setIsTargetsOptionSelected","setSelectedTargetIndex","setPieChartData","occupationsData","setOccupationsData","numShootingsData","setNumShootingsData","ageGroupData","setAgeGroupData","ageGroupKeys","ageGroups","setAgeGroups","ageGroupColors","mentalHealthFrequencies","setMentalHealthFrequencies","mentalHealthKeys","setMentalIllnesses","mentalHealthColors","Array","from","Set","currentKey","stackedDataToView","setStackedDataToView","spaceData","setSpaceData","csv","culpritDemographics","then","dataReceived","yearlyDemographics","shootingsOnThisYear","Date","split","push","filterCulpritDemographicData","allMassShootings","dataForPieChart","shootingTargets","filteredData","row","Target","unknownData","filterShootingTargetData","dataForStackedGraph","yearlyMentalHealth","currentYearData","filterMentalHealthData","shooterOccupations","difference","military","other","filterMilitaryCulprits","victimsOfShootings","States","Fatalities","Injured","filterVictimsData","targetsFrequency","stateTargets","defineProperty","writable","enumerable","configurable","filterTargetsData","numMassShootings","propertyString","valueString","formattedData","formatData","closeOpenSpaces","Space","injured","parseClosedOpenData","dataForUS","selectedIndex","currentTarget","targetString","onClick","data-index","yes","no","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.42d2d632.chunk.js","sourcesContent":["import React from 'react'\n\nconst Legend = ({ keys, colors }) => {\n    return (\n        <article className=\"legend\">\n            {\n                keys.map((key, i) => {\n                    // Capitalise first letter of key\n                    const capitalisedKey = `${key.charAt(0).toUpperCase()}${key.substring(1)}`\n                    return (\n                        <div key={i} className=\"key\" style={{ backgroundColor: colors[i] }}>\n                            <p>{capitalisedKey}</p>\n                        </div>\n                    )\n                })\n            }\n        </article>\n    )\n}\n\nexport default Legend","import { useEffect, useState } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\n\nexport const useResizeObserver = ref => {\n    const [dimensions, setDimensions] = useState(null)\n    useEffect(() => {\n        const observerTarget = ref.current\n        const resizedObserver = new ResizeObserver(entries => {\n            entries.forEach(entry => setDimensions(entry.contentRect))\n        })\n        resizedObserver.observe(observerTarget)\n        return () => {\n            resizedObserver.unobserve(observerTarget)\n        }\n    }, [ref])\n    return dimensions\n}","import React, { useRef, useEffect } from 'react';\nimport { select, arc, pie, scaleOrdinal } from 'd3';\nimport Legend from '../Legend/Legend'\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver'\n\n// https://www.youtube.com/watch?v=HLpw0JFY4-E&t=37s\n\nconst PieChart = ({ chartId, chartAlign, pieChartData, innerRadius, outerRadius }) => {\n\n    // Pointers for the svg and wrapping article element respectively\n    const pieChartRef = useRef()\n    const wrapperRef = useRef()\n\n    // Allows us to make the chart a bit more responsive\n    const dimensions = useResizeObserver(wrapperRef)\n\n    // Pie chart can only use numerical values, so we have to split up the data\n    // into two variables. One will hold all the titles or keys, and the other\n    // will hold all the values\n    const pieChartKeys = Object.keys(pieChartData)\n    const pieChartValues = Object.values(pieChartData)\n\n    // will be called initially and then every time the data array changes\n    useEffect(() => {\n        const svg = select(pieChartRef.current)\n\n        // If no dimensions or props are provided, the function will exit\n        if (!dimensions || !pieChartKeys.length || !pieChartValues.length) return\n        if (innerRadius === undefined || outerRadius === undefined) return\n\n\n        \n        \n        // Helps us to create the individual arcs for each data point\n        const arcGenerator = arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n\n        const pieGenerator = pie()\n        // Holds the information needed for the pieGenerator to work its magic\n        const instructions = pieGenerator(pieChartValues)\n\n        const colorScale = scaleOrdinal()\n            .domain(pieChartValues)\n            // Change colors here\n            .range([\"#EC8C86\", \"#E8483F\", \"#B53731\"]);\n        \n        // Creating the pie chart\n        svg\n            .selectAll(\".slice\")\n            .data(instructions)\n            .join(\"path\")\n            // Gave each slice a class of value + the number of victims\n            // E.g. value157\n            // This will help us target specific slices\n            .attr(\"class\", instruction => `slice value${instruction.value}`)\n            // .attr(\"stroke\", \"black\")\n            .attr(\"fill\", instruction => colorScale(instruction.value))\n            .style(\n                \"transform\",\n                `translate(${dimensions.width / 2}px, ${dimensions.height / 2}px)`\n            )\n            .attr(\"d\", instruction => arcGenerator(instruction))\n            .on(\"mouseenter\", (data) => {\n\n                console.log(data)\n                // We need to grab the label that corresponds to the numerical value\n                // Just made some variables to make it easier to access the \n                // labels and values arrays\n                let labelIndex = -1\n\n                // Loop through values array until we find a matching value,\n                // then assign the index of that element to labelIndex\n                for (let i = 0; i < pieChartValues.length; i++) {\n                    if (pieChartValues[i] === data.data) {\n                        labelIndex = i\n                        break;\n                    }\n                }\n\n                if (labelIndex < 0) return\n\n                // Capitalises first letter of label and attaches it to the rest of the word\n                const upperCaseLetter = pieChartKeys[labelIndex].charAt(0).toUpperCase()\n                const restOfWord = pieChartKeys[labelIndex].substring(1)\n                \n                pieChartKeys[labelIndex] = `${upperCaseLetter}${restOfWord}`\n\n                const text = document.getElementById(chartId)\n                text.textContent = `${pieChartKeys[labelIndex]}: ${pieChartValues[labelIndex]}`\n                \n                // Selects the slice we are currently hovering over and change the color\n                svg\n                    .select(`.value${data.value}`)\n                    .attr(\"fill\", \"#69201C\")\n                \n            })\n            .on(\"mouseleave\", (data) => {\n                // Revert tooltip text back to original\n                const text = document.getElementById(chartId)\n                text.textContent = 'Hover over a slice'\n                // Reverts colors back to the original ones (red, green, blue)\n                svg.selectAll(`.slice`).attr(\"fill\", data => colorScale(data.value))\n            })\n\n    }, [pieChartData, dimensions, innerRadius, outerRadius, chartId, chartAlign, pieChartKeys, pieChartValues])\n\n    return (\n    <article className=\"graph pieChart\">\n        <Legend keys={pieChartKeys} colors={[\"#EC8C86\", \"#E8483F\", \"#B53731\"]} />\n        <div ref={wrapperRef}>\n            <svg ref={pieChartRef}></svg>\n        </div>\n        <p className=\"dataSource\">Kaggle, 2017, Mass Shootings in the U.S. (per state). \n          Obtained from Wikipedia, Mother Jones, Stanford, USA Today, and other web sources, \n          last accessed 24 May 2020: \n           <a className=\"dataLink\" \n                href=\"https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n            >\n                https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\n            </a>\n        </p>\n        <div className=\"tooltipBox\">\n            <p id={chartId}>Hover over a slice</p>\n        </div>\n    </article>\n    )\n}\n\nexport default PieChart","\n// Binding the data from DC's data to the main geoJson object imported into the App.js file\nexport const bindDCDataToGeoJson = (updatedData, victims, targets) => {\n    bindVictimsData(updatedData, victims)\n    bindTargetsData(updatedData, targets)\n\n    return updatedData\n}\n\nconst bindVictimsData = (updatedData, victims) => {\n    for (let i = 0; i < updatedData.length; i++) {\n        const state = updatedData[i].properties.NAME\n        if (victims[state] === undefined) {\n            updatedData[i].properties[\"shootings\"] = 0\n            updatedData[i].properties[\"fatalities\"] = 0\n            updatedData[i].properties[\"injuries\"] = 0\n            updatedData[i].properties[\"policemenKilled\"] = 0\n            updatedData[i].properties[\"totalVictims\"] = 0\n        } else {\n            updatedData[i].properties[\"shootings\"] = victims[state].shootings\n            updatedData[i].properties[\"fatalities\"] = victims[state].fatalities\n            updatedData[i].properties[\"injuries\"] = victims[state].injuries\n            updatedData[i].properties[\"policemenKilled\"] = victims[state].policemenKilled\n            updatedData[i].properties[\"totalVictims\"] = victims[state].totalVictims\n        }\n        \n    }\n\n    return updatedData\n}\n\nconst bindTargetsData = (updatedData, targets) => {\n    for (let i = 0; i < updatedData.length; i++) {\n        const state = updatedData[i].properties.NAME\n        if (targets[state] === undefined) {\n            updatedData[i].properties[\"targets\"] = 0\n        } else {\n            updatedData[i].properties[\"targets\"] = targets[state]\n        }\n    }\n\n    return updatedData\n}\n\nexport const filterVictimsData = (data) => {\n    const filteredData = {}\n\n    for (let i = 0; i < data.length; i++) {\n        const row = data[i]\n        const state = row.States\n        filteredData[state] = {\n            shootings: +row[\"Number of mass shootings\"],\n            fatalities: +row.Fatalities,\n            injuries: +row.Injured,\n            policemenKilled: +row[\"Policemen Killed\"],\n            totalVictims: +row[\"Total victims\"]\n        }\n    }\n\n    return filteredData\n}\n\nexport const filterTargetsData = (data) => {\n    // Filter the data so that each state has the data all targets\n    const stateTargets = {}\n    const filteredData = Object.keys(data[0]).filter(key => key !== \"Target\")\n    filteredData.forEach(key => {\n        Object.defineProperty(stateTargets, `${key}`, {\n            value : data.map(row => (\n                row[key] !== \"\"\n                ?\n                {\n                    target: row.Target,\n                    victims: +row[key]\n                }\n                :\n                {\n                    target: row.Target,\n                    victims: 0\n                }\n            )),\n            writable : true,\n            enumerable : true,\n            configurable : true\n        })}\n    )\n    \n    return stateTargets\n\n}\n\nexport const parseClosedOpenData = (data) => {\n    const parsedData = data.map(row => (\n        {\n            space: row.Space,\n            fatalities: parseFloat(row.Fatalities),\n            injured: parseFloat(row.Injured),\n            totalVictims: parseFloat(row[\"Total victims\"])\n\n        }\n    ))\n\n    return parsedData\n}","import { bindDCDataToGeoJson } from './filterDCData'\n\nexport const filterCasualtyData = (data) => {\n    // Extracting the number of victims associated with each cause\n    const causesFreq = {}\n    for (let i = 0; i < data.length; i++) {\n        const currentCause = data[i].Cause\n        // If we haven't come across the current cause yet, add it in\n        // Then make it equal to the 'Total victims' value for that row\n        if (causesFreq[currentCause] === undefined) {\n            causesFreq[currentCause] = +data[i][\"Total victims\"]\n        } else {\n            // Otherwise, increment the existing value by the current 'Total victims' value\n            causesFreq[currentCause] += +data[i][\"Total victims\"]\n        }\n    }\n\n    // Since I had filtered out all the unknown causes, we can find how many there\n    // by minussing the number of filtered data rows from the main file's rows\n    // Main file = 323 rows\n\n    causesFreq[\"unknown\"] = 323 - data.length\n\n    return causesFreq\n}\n\nexport const filterCulpritDemographicData = (data) => {\n    let yearlyDemographics = []\n    \n    // 2017 - 1966 is 51, and we can use this to loop over the data one time per year\n    for (let i = 0, currentYear = 17; i < 52; i++) {\n        let shootingsOnThisYear = []\n        // Sifting through 2000s data\n        if (currentYear < 65 && currentYear >= 0) {\n            shootingsOnThisYear = data.filter(shooting => {\n                const year = shooting.Date.split(\"/\")[2]\n                if (year === `${2000 + currentYear}` || +year === currentYear) {\n                    return true\n                }\n                return false\n            })\n        // Sifting through 1900s data\n        } else {\n            shootingsOnThisYear = data.filter(shooting => {\n                const year = shooting.Date.split(\"/\")[2]\n                if (year === `${1900 + currentYear}` || +year === currentYear) {\n                    return true\n                }\n                return false\n            })\n        }\n\n        // Adding all the yearly shootings into one place\n        // Made a function (down below) that counts the demographics\n        yearlyDemographics.push(countDemographicFrequency(shootingsOnThisYear))\n        // Updating year property within the object so we can use it for the\n        // x-axis of stacked bar graph\n        if (currentYear < 65 && currentYear >= 0) {\n            yearlyDemographics[yearlyDemographics.length - 1].year = 2000 + currentYear\n        } else {\n            yearlyDemographics[yearlyDemographics.length - 1].year = 1900 + currentYear\n        }\n        \n        // Move to the next year\n        currentYear -= 1\n\n        // If we are done with 2000s, start with the 1900s\n        if (currentYear < 0) {\n            currentYear = 99\n        }\n\n    }\n\n    return yearlyDemographics.reverse()\n\n}\n\n// Helper function for the function above\nconst countDemographicFrequency = (shootingsForYear, currentYear) => {\n\n    // Object that keeps track of demographic frequency for the current year\n    let demographics = {\n        year: 0,\n        kidsAndTeenagers: 0,\n        youngAdults: 0,\n        adults: 0,\n        middleAged: 0\n    }\n\n    // Loop over each row associated with the current year and map the ages\n    // to the object above\n    shootingsForYear.map(shooting => {\n        const age = +shooting.Age\n\n        if (age > 0 && age <= 19) {\n            demographics[\"kidsAndTeenagers\"] += 1\n        } else if (age >= 20 && age < 34) {\n            demographics[\"youngAdults\"] += 1\n        } else if (age >= 35 && age < 45) {\n            demographics[\"adults\"] += 1\n        } else {\n            demographics[\"middleAged\"] += 1\n        }\n        return shooting\n        \n    })\n\n    // Demographic data is ready to be pushed to the array\n    return demographics\n}\n\n// Grabbing the data for the targets of shootings\nexport const filterShootingTargetData = (data) => {\n    const shootingTargets = {}\n    // Remove unknown target values by only keeping strings with at least one character\n    const filteredData = data.filter(row => row.Target.length)\n\n    for (let i = 0; i < filteredData.length; i++) {\n        // Check if current row's target is random\n        if (filteredData[i].Target.toLowerCase() === \"random\") {\n            // If so, increment the 'random' key value in shootingTargets\n            if (shootingTargets[\"random\"] === undefined) {\n                shootingTargets[\"random\"] = 1\n            } else {\n                shootingTargets[\"random\"] += 1\n            }\n        } else {\n            // Otherwise, increment the 'targeted' value\n            if (shootingTargets[\"targeted\"] === undefined) {\n                shootingTargets[\"targeted\"] = 1\n            } else {\n                shootingTargets[\"targeted\"] += 1\n            }\n        }\n    }\n\n    // Now that we have extracted all the random and targeted shootings\n    // we have to add the ones that were unknown\n    // To do this we grab all the rows that didn't have a target defined\n    const unknownData = data.filter(row => !row.Target.length)\n    \n    // And now we just add the number of unknown rows to the shootingTargets object\n    shootingTargets[\"unknown\"] = unknownData.length\n    \n    return shootingTargets\n}\n\n// Grabs the number of shooters with a military background\nexport const filterMilitaryCulprits = (data) => {\n    // The main csv file has 323 rows\n    // I have already filtered out the shooters with a military background and \n    // placed them in their own csv file (called militaryShooters.csv)\n    // So now I just have to minus the number of rows of the filtered file from\n    // the main file\n\n    const difference  = 323 - data.length\n\n    // Now I can create an object that will be used to populate the pie chart\n\n    const finalData = {\n        military: data.length,\n        other: difference\n    }\n\n    return finalData\n\n}\n\nexport const updateGeoJsonData = (geoJson, victims, targets) => {\n    // Make a copy of the geoJson data\n    let updatedData = [...geoJson.features]\n\n    // Add shooting data to the respective U.S. state properties\n    // This binds DC's data\n    bindDCDataToGeoJson(updatedData, victims, targets)\n\n    return updatedData\n}\n\nexport const filterStackedBarGraph = (data, property, startOfRange, endOfRange) => {\n    \n    const filteredData = data.filter(object =>  object[property] >= startOfRange &&\n                                                object[property] <= endOfRange)\n\n    return filteredData\n}\n\n\nexport const filterMentalHealthData = (data) => {\n    let yearlyMentalHealth = []\n    \n    // 2017 - 1966 is 51, and we can use this to loop over the data one time per year\n    for (let i = 0, currentYear = 17; i < 52; i++) {\n        let currentYearData = []\n        // Sifting through 2000s data\n        if (currentYear < 65 && currentYear >= 0) {\n            currentYearData = data.filter(shooting => {\n                const year = shooting.Date.split(\"/\")[2]\n                if (year === `${2000 + currentYear}` || +year === currentYear) {\n                    return true\n                }\n                return false\n            })\n        // Sifting through 1900s data\n        } else {\n            currentYearData = data.filter(shooting => {\n                const year = shooting.Date.split(\"/\")[2]\n                if (year === `${1900 + currentYear}` || +year === currentYear) {\n                    return true\n                }\n                return false\n            })\n        }\n\n        // Adding all the yearly shootings into one place\n        // Made a function (down below) that counts the demographics\n        yearlyMentalHealth.push(countMentalHealthFrequency(currentYearData))\n        // Updating year property within the object so we can use it for the\n        // x-axis of stacked bar graph\n        if (currentYear < 65 && currentYear >= 0) {\n            yearlyMentalHealth[yearlyMentalHealth.length - 1].year = 2000 + currentYear\n        } else {\n            yearlyMentalHealth[yearlyMentalHealth.length - 1].year = 1900 + currentYear\n        }\n        \n        // Move to the next year\n        currentYear -= 1\n\n        // If we are done with 2000s, start with the 1900s\n        if (currentYear < 0) {\n            currentYear = 99\n        }\n\n    }\n\n    return yearlyMentalHealth.reverse()\n\n}\n\n// Helper function for the function above\nconst countMentalHealthFrequency = (mentalHealthData) => {\n\n    // Object that keeps track of demographic frequency for the current year\n    let mentalIllnesses = {\n        year: 0,\n        actsOfTerrorism: 0,\n        psychologicalFactors: 0,\n        anger: 0,\n        frustration: 0,\n        unknown: 0\n    }\n\n    // Loop over each row associated with the current year and map the ages\n    // to the object above\n    for (let i = 0; i < mentalHealthData.length; i++) {\n        const row = mentalHealthData[i]\n\n        switch(row.Cause) {\n            case \"terrorism\":\n                mentalIllnesses[\"actsOfTerrorism\"] += 1\n                break;\n            case \"psycho\":\n                mentalIllnesses[\"psychologicalFactors\"] += 1\n                break;\n            case \"anger\":\n                mentalIllnesses[\"anger\"] += 1\n                break;\n            case \"frustration\":\n                mentalIllnesses[\"frustration\"] += 1\n                break;\n            case \"unknown\":\n            case \"\":\n                mentalIllnesses[\"unknown\"] += 1\n                break;\n            default:\n                break;\n        }\n\n    }\n\n    console.log(mentalIllnesses)\n\n    // Mental health data is ready to be pushed to the array\n    return mentalIllnesses\n}","import React from 'react'\n\nconst DropShadow = ({ stdDeviation, slope }) => {\n    return (\n        <defs>\n            <filter id=\"dropshadow\" height=\"130%\">\n            <feGaussianBlur in=\"SourceAlpha\" stdDeviation={stdDeviation}/> \n            <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\"/>\n            <feComponentTransfer>\n                <feFuncA type=\"linear\" slope={slope}/>\n            </feComponentTransfer>\n            <feMerge> \n                <feMergeNode/>\n                <feMergeNode in=\"SourceGraphic\"/> \n            </feMerge>\n            </filter>\n        </defs>\n    )\n}\n\nexport default DropShadow","import React, { useRef, useEffect, useState } from 'react'\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3'\nimport { useResizeObserver } from '../../hooks/useResizeObserver'\nimport { updateGeoJsonData } from '../../functions/filterAndrewData'\nimport DropShadow from './DropShadow'\n\n// Where I got the GeoMap from: https://exploratory.io/map\n\n\nconst GeoChart = ({ data, victimsPerState, targetsPerState, property, isTargetsOptionSelected, selectedTargetIndex }) => {\n    const geoChartRef = useRef()\n    const wrapperRef = useRef()\n    const dimensions = useResizeObserver(wrapperRef)\n    const [selectedCountry, setSelectedCountry] = useState(null)\n\n    useEffect(() => {\n        const svg = select(geoChartRef.current)\n\n        if (!dimensions || targetsPerState === undefined || victimsPerState === undefined) return\n\n        const updatedFeaturesData = updateGeoJsonData(data, victimsPerState, targetsPerState)\n\n        // use resixed dimensions\n        // but fallback on getBoundingClientRect if there are no dimensions yet\n        const { width, height } = dimensions || wrapperRef.current.getBoundingClientRect()\n\n        if (updatedFeaturesData === undefined) return\n\n\n        const setMax = () => {\n            \n            return max(updatedFeaturesData, feature => {\n                const targets = feature.properties.targets\n                return targets === 0 ? 0 : feature.properties.targets[selectedTargetIndex].victims\n            })\n            \n        }\n\n        const minProp = min(updatedFeaturesData, feature => feature.properties[property])\n        const maxProp = max(updatedFeaturesData, feature => feature.properties[property])\n\n        let maxPropTargets = setMax() \n        if (maxPropTargets === 0) {\n            maxPropTargets = 1\n        }\n\n\n        \n        const colorScale = scaleLinear()\n            .domain(isTargetsOptionSelected ? [0, maxPropTargets] : [minProp, maxProp])\n            // Change colors here\n            .range([\"#ffcbc7\", \"#E8483F\"])\n\n        // Projects coordinates on a 2D plane\n        const projection = geoMercator()\n            .fitSize([width, height], selectedCountry || data)\n            .precision(100)\n\n        // Takes geojson data,\n        // Transforms that into the d attribute of a path element\n        const pathGenerator = geoPath().projection(projection)\n\n        \n        const setTooltipText = feature => {\n            const targets = feature.properties.targets\n            // const formattedProperty = property.replace(/([a-z0-9])([A-Z])/g, '$1 $2').toLowerCase()\n            let targetsText = \"\"\n            let number = 0\n            if (targets !== 0) {\n                targetsText = `${targets[selectedTargetIndex].target.replace(/([a-z0-9])([A-Z])/g, '$1 $2').toLowerCase()}`\n                number = targets[selectedTargetIndex].victims\n            } else {\n                targetsText = \"Unknown\"\n            }\n            return !isTargetsOptionSelected \n                ?\n                `${feature.properties.NAME}: ${feature.properties[property]}`\n                :\n                (   \n                    targetsText !== \"Unknown\" ?\n                    `${feature.properties.NAME}: ${number}`\n                    :\n                    targetsText\n                )\n        }\n\n        const setFillOfMap = feature => {\n            if (isTargetsOptionSelected) { \n                console.log(feature, property, selectedTargetIndex)\n                if (feature.properties.targets !== undefined) {\n                    const targetValue = feature.properties.targets\n                    return targetValue === 0 \n                        ?\n                        colorScale(targetValue)\n                        :\n                        colorScale(targetValue[selectedTargetIndex].victims)\n                    // colorScale(target)\n                } else {\n                    return \"lightgray\"\n                }\n            } else {\n\n               return feature.properties[property] !== undefined \n                    ? colorScale(feature.properties[property])\n                    // Change color for undefined values\n                    : \"lightgray\"\n            }\n                        \n        }\n        \n     // set position etc.\n     const displayTooltip = (feature) => {\n        const tooltip = document.getElementById(\"geoTooltip\");\n        document.addEventListener(\"mousemove\", (e) => {\n            const x = e.clientX\n            const y = e.clientY\n            tooltip.style.left = (x - 350) + \"px\"\n            tooltip.style.top = (y - 80) + \"px\"\n        })\n        const text = document.getElementById(\"stateInfo\")\n        text.textContent = setTooltipText(feature)\n    }\n\n        // Render each country\n        svg\n            .selectAll(\".country\")\n            .data(data.features)\n            .join(\"path\")\n            .attr(\"class\", \"country\")\n            .on(\"mouseenter\", feature => {\n\n                select(\"#geoTooltip\").style(\"display\", \"block\")\n                displayTooltip(feature)\n\n            })\n            .on(\"mouseleave\", feature => {\n                // Removes tooltip\n                select(\"#geoTooltip\").style(\"display\", \"none\")\n                // Reverts colors back to the original ones (red, green, blue)\n                svg.selectAll(`.slice`).attr(\"fill\", feature => colorScale(feature.value))\n            })\n            .on(\"click\", feature => {\n                \n                setSelectedCountry(selectedCountry === feature ? null : feature)\n            }\n            )\n            .transition()\n            .duration(1000)\n            .attr(\"fill\", feature => setFillOfMap(feature))\n            .attr(\"d\", feature => pathGenerator(feature))\n\n            \n\n    }, [data, dimensions, property, selectedCountry, victimsPerState, targetsPerState, isTargetsOptionSelected, selectedTargetIndex])\n\n\n    return (\n        <div ref={wrapperRef} className=\"graph geoChart\">\n            <p id=\"usaText\">U S A</p>\n            <svg ref={geoChartRef}>\n                <DropShadow stdDeviation={2} slope={0.5} />\n            </svg>\n            \n            <div className=\"geoChartInfoContainer\">\n            {\n                selectedCountry !== null &&\n                <div className=\"geoChartInfo\">\n                    <p className=\"infoTitle\">{`${selectedCountry.properties.NAME} Statistics:`}</p>\n                    <p>{`Shootings: ${selectedCountry.properties.shootings}`}</p>\n                    <p>{`Fatalities: ${selectedCountry.properties.fatalities}`}</p>\n                    <p>{`Injuries: ${selectedCountry.properties.injuries}`}</p>\n                    <p>{`Policemen Killed: ${selectedCountry.properties.policemenKilled}`}</p>\n                    <p>{`Total Victims: ${selectedCountry.properties.totalVictims}`}</p>\n                </div>    \n            }\n            </div>\n            <div id=\"geoTooltip\">\n                <p id=\"stateInfo\"></p>\n            </div>\n        </div>\n    )\n}\n\nexport default GeoChart","import React, { useRef, useEffect, useState } from 'react';\nimport { select, scaleBand, axisBottom, axisLeft, stack, max, scaleLinear } from 'd3';\nimport { filterStackedBarGraph } from '../../functions/filterAndrewData'\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver'\n\n// Tutorial: https://www.youtube.com/watch?v=bXN9anQN_kQ&list=PLDZ4p-ENjbiPo4WH7KdHjh_EMI7Ic8b2B&index=16\n\nconst AnimatedStackedBarGraph = ({ stackedBarGraphData, keys, colors }) => {\n\n    const [startValue, setStartValue] = useState(\"1966\")\n    const [endValue, setEndValue] = useState(\"2017\")\n\n    const onStartValueChange = (e) => {\n        setStartValue(e.target.value)\n    }\n\n    const onEndValueChange = (e) => {\n        setEndValue(e.target.value)\n    }\n\n    // Pointers for the svg and wrapping article element respectively\n    const stackedGraphRef = useRef()\n    const wrapperRef = useRef()\n\n    // Allows us to make the chart a bit more responsive\n    const dimensions = useResizeObserver(wrapperRef)\n\n    // will be called initially and then every time the data array changes\n    useEffect(() => {\n        const svg = select(stackedGraphRef.current)\n        const { width, height } =  \n            dimensions || wrapperRef.current.getBoundingClientRect()\n\n        // If no dimensions or data is provided, the function will stop\n        if (!dimensions || !stackedBarGraphData.length) return\n\n        // Filtering data according to startValue and endValue\n        // If the user makes the starting value higher than the ending value,\n        // I have to swap them around so that the filter still works\n        const dataForGraph = startValue > endValue \n                            ? \n                            filterStackedBarGraph(stackedBarGraphData, \"year\", endValue, startValue)\n                            :\n                            filterStackedBarGraph(stackedBarGraphData, \"year\", startValue, endValue)\n\n\n        console.log(dataForGraph)\n\n        const stackGenerator = stack().keys(keys)\n        const layers = stackGenerator(dataForGraph)\n        const yAxisRange = [0, max(layers, layer => {\n            console.log(layer)\n            return max(layer, sequence => sequence[1])})]\n\n\n        // Scales\n        // This helps divide the width of the individual stacks evenly across the width of the svg\n        const xScale = scaleBand()\n            .domain(dataForGraph.map(data => data.year))\n            .range([0, width])\n            .padding(0.25)\n        \n        // This divides the y values even along the height of the svg\n        // Range goes from height to 0 because 0 is the top left of the svg, \n        // and height goes downwards\n        const yScale = scaleLinear()\n            .domain(yAxisRange)\n            .range([height, 0])\n        \n\n        // Setting up the axes\n        const xAxis = axisBottom(xScale)\n        svg\n            .select(\".x-axis\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(xAxis)\n            .selectAll(\"text\")\n            .attr(\"y\", 0)\n            .attr(\"x\", 9)\n            .attr(\"dy\", \".35em\")\n            .attr(\"transform\", \"rotate(90)\")\n            .style(\"text-anchor\", \"start\")\n\n        const yAxis = axisLeft(yScale)\n        svg\n            .select(\".y-axis\")\n            .call(yAxis)\n\n\n        // Rendering the graph\n        // Each layer holds the data points being graphed\n        // Each rect holds a specific data point within that layer\n        svg\n            .selectAll(\".layer\")\n            .data(layers)\n            .join(\"g\")\n            .attr(\"class\", \"layer\")\n            .attr(\"fill\", layer => colors[layer.key])\n            .selectAll(\"rect\")\n            .data(layer => layer)\n            .join(\"rect\")\n            .attr(\"class\", \"dataRect\")\n            .transition()\n            .duration(1500)\n            .attr(\"x\", sequence => xScale(sequence.data.year))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"y\", sequence => yScale(sequence[1]))\n            .attr(\"height\", sequence => yScale(sequence[0]) - yScale(sequence[1]))\n\n\n    }, [stackedBarGraphData, dimensions, keys, colors, startValue, endValue])\n\n    return (\n    <article>\n        <article className=\"graph stackedGraph\">\n            <div ref={wrapperRef}>\n                <svg ref={stackedGraphRef}>\n                    <g className=\"x-axis\" />\n                    <g className=\"y-axis\" />\n                </svg>\n            </div>\n            \n        </article>\n        <article className=\"rangeSliders\">\n            <div className=\"sliderContainer\">\n                <label>Start Value</label>\n                <div>\n                    <input  className=\"slider\" \n                            type=\"range\"\n                            min={\"1966\"} \n                            max={\"2017\"}\n                            value={startValue}\n                            onChange={onStartValueChange}\n                    />\n                    <span className=\"sliderValue\">{startValue}</span>\n                </div>\n            </div>\n            <div className=\"sliderContainer\">\n                <label>End Value</label>\n                <div>\n                    <input  className=\"slider\" \n                            type=\"range\"\n                            min={\"1966\"} \n                            max={\"2017\"}\n                            value={endValue}\n                            onChange={onEndValueChange}\n                    />\n                    <span className=\"sliderValue\">{endValue}</span>\n                </div>\n            </div>\n        </article>\n        <p className=\"dataSource\">Kaggle, 2017, Mass Shootings in the U.S. (per state). \n          Obtained from Wikipedia, Mother Jones, Stanford, USA Today, and other web sources, \n          last accessed 24 May 2020: \n           <a className=\"dataLink\" \n                href=\"https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n            >\n                https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\n            </a>\n        </p>\n    </article>\n    )\n}\n\nexport default AnimatedStackedBarGraph","import React from 'react'\n\nconst FilterButtons = ({ keysState, keysArray, setKeysArray, colors, onCheckboxChange } ) => {\n    return (\n        <div className=\"fields\">\n          {\n            keysArray.map(key => (\n              <div key={key} className=\"fieldContainer mentalHealthFieldContainer\" style={{ backgroundColor: colors[key] }}>\n                <div className=\"field\">\n                  <input\n                    id={key}\n                    type=\"checkbox\"\n                    checked={keysState.includes(key)}\n                    onChange={(e) => onCheckboxChange(e, key, keysState, setKeysArray)}\n                  />\n                  <label htmlFor={key}>\n                    {/* The key is in camel case, so this will split it into individual words */}\n                    {`${key.charAt(0).toUpperCase()}${key.substring(1).replace(/([a-z0-9])([A-Z])/g, '$1 $2')}`}\n                  </label>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n    )\n}\n\nexport default FilterButtons","import React, { useRef, useEffect } from 'react';\nimport { select, scaleBand, axisBottom, axisLeft, stack, scaleLinear } from 'd3';\nimport Legend from '../Legend/Legend'\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver'\n\n// Tutorial: https://www.youtube.com/watch?v=bXN9anQN_kQ&list=PLDZ4p-ENjbiPo4WH7KdHjh_EMI7Ic8b2B&index=16\n\nconst StackedBarGraph = ({ stackedBarGraphData, keys, colors }) => {\n\n    // Pointers for the svg and wrapping article element respectively\n    const stackedGraphRef = useRef()\n    const wrapperRef = useRef()\n\n    // Allows us to make the chart a bit more responsive\n    const dimensions = useResizeObserver(wrapperRef)\n\n    // will be called initially and then every time the data array changes\n    useEffect(() => {\n        const svg = select(stackedGraphRef.current)\n        const { width, height } =  \n            dimensions || wrapperRef.current.getBoundingClientRect()\n\n        // If no dimensions or data is provided, the function will stop\n        if (!dimensions || !stackedBarGraphData.length) return\n\n\n        const stackGenerator = stack().keys(keys)\n        const layers = stackGenerator(stackedBarGraphData)\n        const yAxisRange = [0, 100]\n\n        // Scales\n        // This helps divide the width of the individual stacks evenly across the width of the svg\n        const xScale = scaleBand()\n            .domain(stackedBarGraphData.map(data => data.space))\n            .range([0, width])\n            .padding(0.25)\n        \n        // This divides the y values even along the height of the svg\n        // Range goes from height to 0 because 0 is the top left of the svg, \n        // and height goes downwards\n        const yScale = scaleLinear()\n            .domain(yAxisRange)\n            .range([height, 0])\n        \n\n        // Setting up the axes\n        const xAxis = axisBottom(xScale)\n        svg\n            .select(\".x-axis\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(xAxis)\n\n        const yAxis = axisLeft(yScale)\n        svg\n            .select(\".y-axis\")\n            .call(yAxis)\n\n\n        // Rendering the graph\n        // Each layer holds the data points being graphed\n        // Each rect holds a specific data point within that layer\n        svg\n            .selectAll(\".layer\")\n            .data(layers)\n            .join(\"g\")\n            .attr(\"class\", \"layer\")\n            .attr(\"fill\", layer => colors[layer.key])\n            .selectAll(\"rect\")\n            .data(layer => layer)\n            .join(\"rect\")\n            .attr(\"class\", \"dataRect\")\n            .on(\"mouseenter\", layer => {\n                const value = parseFloat(layer[1] - layer[0], 2)\n                const text = document.getElementById(\"stackedTooltipText\")\n                text.textContent = layer[0] === 0 \n                                    ? `${Number(value.toFixed(2))} Fatalities`\n                                    : `${Number(value.toFixed(2))} Injured`\n            })\n            .on(\"mouseleave\", layer => {\n                const text = document.getElementById(\"stackedTooltipText\")\n                text.textContent = 'Hover over a block'\n            })\n            .attr(\"x\", sequence => xScale(sequence.data.space))\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"y\", sequence => yScale(sequence[1]))\n            .attr(\"height\", sequence => yScale(sequence[0]) - yScale(sequence[1]))\n\n\n    }, [stackedBarGraphData, dimensions, keys, colors])\n\n    return (\n    <article className=\"graph stackedGraph\">\n        <Legend keys={keys} colors={Object.values(colors)} />\n        <div ref={wrapperRef}>\n            <svg ref={stackedGraphRef}>\n                <g className=\"x-axis\" />\n                <g className=\"y-axis\" />\n            </svg>\n        </div>\n        <p className=\"dataSource\">Kaggle, 2017, Mass Shootings in the U.S. (per state). \n          Obtained from Wikipedia, Mother Jones, Stanford, USA Today, and other web sources, \n          last accessed 24 May 2020: \n           <a className=\"dataLink\" \n                href=\"https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n            >\n                https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\n            </a>\n        </p>\n        <div className=\"tooltipBox\">\n            <p id=\"stackedTooltipText\">Hover over a block</p>\n        </div>\n    </article>\n    )\n}\n\nexport default StackedBarGraph","import React, { useRef, useEffect } from 'react';\nimport {  select, line, axisBottom, axisRight, scaleLinear } from 'd3';\n\nimport { useResizeObserver } from '../../hooks/useResizeObserver'\n\nconst LineGraph = ({ lineGraphData, yAxisMax, reverseData, xAxisFontSize }) => {\n\n    const svgRef = useRef()\n    const wrapperRef = useRef()\n    const dimensions = useResizeObserver(wrapperRef)\n\n    // will be called initially and then every time the data array changes\n    useEffect(() => {\n    const svg = select(svgRef.current)\n\n    if (!dimensions || lineGraphData === undefined || xAxisFontSize === undefined) return\n    \n    let keys = Object.keys(lineGraphData)\n    let values = Object.values(lineGraphData)\n\n    if (reverseData !== undefined && reverseData === true) {\n        keys = keys.reverse()\n        values = values.reverse()\n    }\n\n    const xScale = scaleLinear()\n        .domain([0, keys.length - 1])\n        .range([0, dimensions.width])\n\n    const yScale = scaleLinear()\n        .domain([0, yAxisMax])\n        .range([dimensions.height, 0])\n\n    const xAxis = axisBottom(xScale)\n        .ticks(keys.length)\n        .tickFormat(index => keys[index])\n\n    \n    svg\n        .select(\".x-axis\")\n        .style(\"transform\", `translateY(${dimensions.height}px)`)\n        .call(xAxis)\n        .selectAll(\"text\")\n        .attr(\"y\", 0)\n        .attr(\"x\", 9)\n        .attr(\"dy\", \".35em\")\n        .attr(\"transform\", \"rotate(90)\")\n        .style(\"text-anchor\", \"start\")\n        .style(\"font-size\", xAxisFontSize !== undefined ? `${xAxisFontSize}px` : \"\")\n\n\n    const yAxis = axisRight(yScale)\n    svg\n        .select(\".y-axis\")\n        .style(\"transform\", `translateX(${dimensions.width}px)`)\n        .call(yAxis)\n\n    // generates the \"d\" attribute of a path element\n    const myLine = line()\n    .x((value, index) => xScale(index))\n    .y(yScale)\n\n    // renders the path element and attaches the \"d\" \n    // attribute from line generator above\n    svg\n        .selectAll(\".line\")\n        .data([values])\n        .join(\"path\")\n        .attr(\"class\", \"line\")\n        .on(\"mouseenter\", value => console.log(value))\n        .attr(\"d\", myLine)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#DA0000\")\n\n    }, [lineGraphData, reverseData, yAxisMax, xAxisFontSize, dimensions])\n\n    return (\n    <article className=\"graph lineGraph\">\n        <h3 id=\"part4-1\">Number of mass shootings recorded per year</h3>\n        <div ref={wrapperRef}>\n            <svg ref={svgRef}>\n                <g className=\"x-axis\" />\n                <g className=\"y-axis\" />\n            </svg>\n        </div>\n        <div id=\"lineTooltip\" className=\"tooltip\">\n            <p id=\"pointInfo\"></p>\n        </div>\n    </article>\n    )\n}\n\nexport default LineGraph","import React from 'react'\n\nconst Sidebar = () => {\n    return (\n        <aside>\n          <div class=\"aside-container\">\n            <h4>Jump To...</h4>\n            <ol>\n                <li><a href=\"#part1\">Mass Shootings in the U.S.</a></li>\n                <li><a href=\"#part2\">Where do shootings occur most often?</a></li>\n                <ol className=\"subheadings\">\n                    <li>\n                        <a href=\"#part2-1\">Percentage of fatalities and injuries as a result of mass shootings in open or closed spaces</a>\n                    </li>\n                </ol>\n                <li><a href=\"#part3\">Who is being targeted?</a></li>\n                <ol className=\"subheadings\">\n                    <li>\n                        <a href=\"#part3-1\">Shootings involving a specific vs random target</a>\n                    </li>\n                </ol>\n                <li><a href=\"#part4\">Frequency of Shootings</a></li>\n                <ol className=\"subheadings\">\n                    <li>\n                        <a href=\"#part4-1\">Number of mass shootings recorded per year</a>\n                    </li>\n                </ol>\n                <li><a href=\"#part5\">Why do they do it?</a></li>\n                <ol className=\"subheadings\">\n                    <li>\n                        <a href=\"#part5-1\">Did the shooter suffer from a mental health issue?</a>\n                    </li>\n                </ol>\n                <li><a href=\"#part6\">Shootings in relation to mental health and age groups</a></li>\n                <li><a href=\"#part7\">Who are they?</a></li>\n                <ol className=\"subheadings\">\n                    <li>\n                        <a href=\"#part7-1\">Percentage of shooters with a background in the military or police force</a>\n                    </li>\n                </ol>\n                <li><a href=\"#part8\">Conclusion</a></li>\n            </ol>\n          </div>\n      </aside>\n    )\n}\n\nexport default Sidebar","import React, { useState, useEffect } from 'react';\n\nimport PieChart from './components/PieChart/PieChart'\nimport GeoChart from './components/GeoChart/GeoChart'\nimport dataForUS from './json/states.geo.json'\nimport AnimatedStackedBarGraph from './components/StackedBarGraph/AnimatedStackedBarGraph'\nimport FilterButtons from './components/StackedBarGraph/FilterButtons'\nimport StackedBarGraph from './components/StackedBarGraph/StackedBarGraph'\nimport LineGraph from './components/LineGraph/LineGraph'\nimport Sidebar from './components/Sidebar/Sidebar'\n\n// Converts csv files to an array so we can manipulate them\nimport { csv } from 'd3'\n// Andrew's Data\nimport allMassShootings from './data/Andrew/mass_shootings.csv'\nimport culpritDemographics from './data/Andrew/culpritDemographics.csv'\nimport shooterOccupations from './data/Andrew/militaryShooters.csv'\n\n// DC's Data\nimport victimsOfShootings from './data/DC/victimsPerState.csv'\nimport targetsFrequency from './data/DC/targetsFrequency.csv'\nimport closeOpenSpaces from './data/DC/closeOpenSpaces.csv'\n\n// Tom's Data\nimport numMassShootings from './data/Tom/numMassShootings.csv'\n\n// All filter and update functions (from the andrewsFunctions.js file)\n// If you make a separate, make a new import, don't append it to this one as\n// it won't find it in the andrewsFunctions.js file\nimport {  filterCulpritDemographicData, \n          filterShootingTargetData, \n          filterMilitaryCulprits,\n          filterMentalHealthData } from './functions/filterAndrewData'\n\nimport { filterVictimsData, filterTargetsData, parseClosedOpenData } from './functions/filterDCData'\n\nimport { formatData } from './functions/formatData'\n\nimport './App.css';\n\nfunction App() {\n  \n  // GeoChart Data\n  // const [shootingsPerState, setShootingsPerState] = useState({})\n  const [victimsPerState, setVictimsPerState] = useState({})\n  const [targetsPerState, setTargetsPerState] = useState({})\n  const [property, setProperty] = useState(\"shootings\")\n  const [isTargetsOptionSelected, setIsTargetsOptionSelected] = useState(false)\n  // This holds the index of which target has been selected\n  // This index will help us retrieve the number of victims associated with that target\n  // for a specific state\n  const [selectedTargetIndex, setSelectedTargetIndex] = useState(0)\n\n\n  // For first dropdown\n  const onStatChange = (e) => {\n    if (e.target.value !== \"target\") {\n      setProperty(e.target.value)\n      setIsTargetsOptionSelected(false)\n    } else {\n      setProperty(e.target.value)\n      setIsTargetsOptionSelected(true)\n    }\n  }\n\n  // For the second dropdown that appears when 'Targets' is selected\n  const onTargetChange = (e) => {\n    const index = document.getElementById(\"targetSelect\").selectedIndex\n    setProperty(e.target.value)\n    setSelectedTargetIndex(index)\n  }\n\n\n  // PieChart Data\n  const [pieChartData, setPieChartData] = useState({})\n  const [occupationsData, setOccupationsData] = useState({})\n\n\n  // Line graph data\n  const [numShootingsData, setNumShootingsData] = useState({})\n\n\n\n  // First Animated Stacked Bar Graph data\n  const [ageGroupData, setAgeGroupData] = useState({})\n  const ageGroupKeys = ['kidsAndTeenagers', 'youngAdults', 'adults', 'middleAged']\n  const [ageGroups, setAgeGroups] = useState(ageGroupKeys)\n  const ageGroupColors = {\n    kidsAndTeenagers:\"#BB86FC\", \n    youngAdults:\"#FF867D\", \n    adults: \"#7CFDA3\", \n    middleAged: \"#FFF57D\"\n  }\n\n  // Second Animated Stacked Bar Graph data\n  const [mentalHealthFrequencies, setMentalHealthFrequencies] = useState([])\n  const mentalHealthKeys = [\"actsOfTerrorism\", \"psychologicalFactors\", \"anger\", \"frustration\", \"unknown\"]\n  const [mentalIllnesses, setMentalIllnesses] = useState(mentalHealthKeys)\n  const mentalHealthColors = {\n    actsOfTerrorism:\"#BB86FC\", \n    psychologicalFactors:\"#FF867D\", \n    anger: \"#7CFDA3\", \n    frustration: \"#E14C92\",\n    unknown: \"#FFAA57\"\n  }\n\n  // Function for filtering data for both stacked bar graphs\n  const onCheckboxChange = (e, key, keysArray, setKeysArray) => {\n    if (!e.target.checked) {\n        const filteredKeysArray = keysArray.filter(currentKey => currentKey !== key)\n        setKeysArray(filteredKeysArray)\n    } else {\n        setKeysArray(Array.from(new Set([...keysArray, key])))\n    }\n  }\n\n  const [stackedDataToView, setStackedDataToView] = useState(\"\")\n\n  const onDataChange = (e) => {\n    console.log(e.target.value)\n    setStackedDataToView(e.target.value)\n  }\n\n\n\n  // Stacked Bar Graph Data\n  const [spaceData, setSpaceData] = useState([])\n  const spaceKeys = [\"fatalities\", \"injured\"]\n  const spaceColors = {\n    fatalities:\"#69201C\", \n    injured:\"#E68C86\"\n  }\n\n\n  useEffect(() => {\n\n    // Filtering the data for stacked bar chart about shootings per ages each year\n    csv(culpritDemographics).then(data => {\n      // Created a method (see functions folder) that extracts the data required\n      const dataReceived = filterCulpritDemographicData(data)\n      setAgeGroupData(dataReceived)\n    })\n\n    // Filtering data for pie chart about the targets for mass shootings\n    csv(allMassShootings).then(data => {\n      // Created a method (see functions folder) that extracts the data required\n      const dataForPieChart = filterShootingTargetData(data)\n      setPieChartData(dataForPieChart)\n\n      const dataForStackedGraph = filterMentalHealthData(data)\n      setMentalHealthFrequencies(dataForStackedGraph)\n\n    })\n\n    csv(shooterOccupations).then(data => {\n      // Created a method (see functions folder) that extracts the data required\n      const dataReceived = filterMilitaryCulprits(data)\n      setOccupationsData(dataReceived)\n    })\n\n    // Filtering data for geo chart\n    csv(victimsOfShootings).then(data => {\n      const dataReceived = filterVictimsData(data)\n      setVictimsPerState(dataReceived)\n    })\n\n    csv(targetsFrequency).then(data => {\n      const dataReceived = filterTargetsData(data)\n\n      setTargetsPerState(dataReceived)\n    })\n\n    // Filtering data for line graph about number of shootings\n    csv(numMassShootings).then(data => {\n      const dataReceived = formatData(data, \"Date\", \"NumShootings\")\n      setNumShootingsData(dataReceived)\n    })\n\n\n    // Filtering data for stacked bar graph about closed and open spaces\n    csv(closeOpenSpaces).then(data => {\n      const dataReceived = parseClosedOpenData(data)\n      setSpaceData(dataReceived)\n    })\n\n\n  }, [])\n\n  return (\n    <section className=\"graphs\">\n      <article id=\"part1\" className=\"geoChartContainer\">\n        <GeoChart data={dataForUS}\n                  victimsPerState={victimsPerState}\n                  targetsPerState={targetsPerState}\n                  property={property}\n                  isTargetsOptionSelected={isTargetsOptionSelected}\n                  selectedTargetIndex={selectedTargetIndex}\n        />\n       \n        <article className=\"dropdownContainer\">\n          <span className={isTargetsOptionSelected ? \"show\" : \"hide\"}>had</span>\n          {\n            isTargetsOptionSelected &&\n            <select id=\"targetSelect\" className=\"dropdown\" onChange={onTargetChange}>\n                  {\n                      // We need to create a dropdown with all the targets.\n                      // Every state has the targets defined, so we can just choose a state\n                      // and grab all the targets from there\n                      targetsPerState[\"Alabama\"].map((currentTarget, index) => {\n                          let targetString = currentTarget.target.replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n                          targetString = `${targetString.charAt(0).toUpperCase()}${targetString.substring(1)}`\n\n                          return <option onClick={console.log(index)} \n                                          key={index} \n                                          value={currentTarget.target} \n                                          data-index={index}\n                                  >\n                                  {targetString}\n                                  </option>\n                      })\n                  }\n            </select>\n          }\n          <span className={isTargetsOptionSelected ? \"show\" : \"hide\"}>as a</span>\n          <select className=\"dropdown\" onChange={onStatChange} >\n            <option value=\"shootings\">Shootings</option>\n            <option value=\"target\">Target</option>\n            <option value=\"fatalities\">Fatalities</option>\n            <option value=\"injuries\">Injuries</option>\n            <option value=\"policemenKilled\">Policemen Killed</option>\n            <option value=\"totalVictims\">Total Victims</option>\n          </select>\n        </article>\n        <p className=\"dataSource\">Kaggle, 2017, Mass Shootings in the U.S. (per state). \n          Obtained from Wikipedia, Mother Jones, Stanford, USA Today, and other web sources, \n          last accessed 24 May 2020: \n           <a className=\"dataLink\" \n                href=\"https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n            >\n                https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\n            </a>\n        </p>\n        <br/>\n        <br/>\n        <h2>Mass Shootings in the U.S. <br /><span id=\"subheading\">as shown per state</span></h2> \n        {/* <h3>Hover over or click a state for more info</h3> */}\n        <p className=\"hypothesis\">Does the public accessibility of firearms and the complexity of mental health in the \n          United States of America increase the likelihood of gun violence and mass shootings?</p>\n\n      </article>\n\n      <Sidebar />\n\n      <p className=\"bodyText\">Based on a dataset of mass shootings in the United States of America (USA), we look \n        into a wide range of mass shootings that occurred from the 1st of July in 1966 to the \n        5th of November 2017, covering 323 shootings which resulted in a total of 1433 deaths \n        and 1995 injuries.</p>\n\n      <h2 id=\"part2\" className=\"bodyHeading\">Where do shootings occur most often?</h2>\n      \n      <p className=\"bodyText\">The USA is a large country, consisting of 50 states. But does the location of the \n        shooting make any difference?\n\n          <br />\n          <br />\n\n        As seen in the map above, California has the most significant number of mass shootings \n        compared to the other states, as well as the highest number of fatalities due to mass \n        shootings.\n\n          <br />\n          <br />\n\n        While Nevada has had the highest number of injuries as a result of mass shootings during \n        this time period, it was the result of a single mass shooting, infamously known as the \n        “2017 Las Vegas shooting”, where a man named Stephen Paddock opened fire on a crowd of \n        concert goers at the Route 91 Harvest music festival on the Las Vegas strip in Nevada.\n\n          <br />\n          <br />\n\n        Interestingly enough, there were three states with no recordings of mass shootings \n        throughout the past five decades, namely New Hampshire, North Dakota, and Rhode Island. \n        Perhaps either they were not captured in the data set, or there truly were no mass shootings, \n        making these three states arguably the safest regarding mass shootings.</p>\n      \n      \n      <br />\n      <br />\n      <h3 id=\"part2-1\" className=\"bodyHeading\">Percentage of fatalities and injuries as a result of mass shootings in open or \n        closed spaces</h3>\n      <StackedBarGraph  stackedBarGraphData={spaceData} \n                        keys={spaceKeys}\n                        colors={spaceColors}\n      />\n      <p className=\"bodyText\">\n        When comparing the locations where mass shootings took place, significantly more mass \n        shootings occurred in a closed space, over twice as many mass shootings than in open \n        spaces. Even when comparing the percentage of injuries to deaths per closed or open \n        space, there is a similarly significant increase in the percentage of overall fatalities\n        from mass shootings in a closed space versus open space, as seen above.\n      </p>\n\n      <br />\n      <br />\n\n      <h2 id=\"part3\" className=\"bodyHeading\">Who is being targeted?</h2>\n      <p className=\"bodyText\">According to the data, nearly half of all recorded mass shootings in America from 1966 \n        to 2017 either did not involve a specific target, or the shooters’ motives for targeting \n        these individuals is unclear.\n\n        As seen in the map above, there are a significant number of mass shootings related to \n        family members, students, teachers, co-workers, and ex-partners, showing that in some \n        cases, when a shooter has a specific target, it tends to be someone they were close to.\n      </p>\n\n      <article className=\"pieChartLayout\">\n        <div className=\"pieChartDesc\">\n          <h3 id=\"part3-1\">Shootings involving a specific vs random target</h3>\n          <p>Looking at this from a different perspective, we compared the number of mass \n            shootings where shooters open fire randomly at a crowd, versus having a specific \n            target in mind when conducting the shooting.\n\n            <br />\n            <br />\n\n            The pie chart shows a noteworthy increase in specific targets compared to random \n            shootings. As we continue to look deeper into a shooter’s motives, we can see that \n            there are many shooters who wish to vent their frustrations on specific targets, \n            likely to be the people who upset the shooter in the first place.</p>\n        </div>\n        <PieChart chartId=\"firstChart\" chartAlign={\"alignRight\"} pieChartData={pieChartData} innerRadius={0} outerRadius={150} />\n      </article>\n\n      <br/>\n      <br/>\n\n      <h2 id=\"part4\" className=\"bodyHeading\">Frequency of shootings</h2>\n      <p className=\"bodyText\">\n      The date of mass shootings has also been considered, in order to learn what role it may have on mass shootings, if any.\n      </p>\n      <LineGraph  lineGraphData={numShootingsData} \n                  yAxisMax={30} \n                  reverseData={false}\n                  xAxisFontSize={10}\n      />\n      <p className=\"dataSource\">Kaggle, 2017, Mass Shootings in the U.S. (per state). \n          Obtained from Wikipedia, Mother Jones, Stanford, USA Today, and other web sources, \n          last accessed 24 May 2020: \n           <a className=\"dataLink\" \n                href=\"https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n            >\n                https://www.kaggle.com/zusmani/us-mass-shootings-last-50-years\n            </a>\n        </p>\n\n      <br />\n\n      <p className=\"bodyText\">Immediately upon observation, we may easily interpret the 2015-2016 period to be the \n        most deadly years of mass shootings in the US. We can also determine that this is a \n        prevalent spike in mass shootings during this period, as the number of these tragedies \n        drops back to the same levels in 2007-2013 for the 2017 year. \n        <br/>\n        <br/>\n        Thus, can we conclude that the prevalence of mass shootings increased over time? While \n        we may be inclined to follow the data and provide a solid ‘yes’, we should also consider \n        that since 1967, the way that mass shootings and the factors around society have changed \n        and evolved greatly. According to this data, it is clear that mass shootings have increased \n        over time, almost exponentially; but we may also need to consider that there are several \n        factors that may have affected this data.\n\n      </p>\n\n      <br />\n      <br />\n\n      <h2 id=\"part5\" className=\"bodyHeading\">Why do they do it?</h2>\n      <p className=\"bodyText\">The data has provided various information about the shooter, such as their \n        age, gender, possible mental health, their intended target, their motives, \n        and more.</p>\n\n      <article id=\"part5-1\" className=\"pieChartLayout\">\n        <div className=\"pieChartDesc\">\n          <h3>Did the shooter suffer from a mental health issue?</h3>\n          <p>We can see that 33% of assailants were diagnosed as mentally ill while 29% did \n            not have any major mental health issues. It is important to note that 38% of \n            recorded shooters mental health status was not identified. This could have been \n            due to the information not being revealed, or the information being unavailable, \n            such as when the shooter commits suicide.</p>\n        </div>\n        <PieChart chartId=\"secondChart\" chartAlign={\"alignRight\"} pieChartData={{ yes: 106, no: 93, unknown: 124 }} innerRadius={0} outerRadius={150} />\n      </article>\n\n      <br />\n      <br />\n\n      <article className=\"stackedGraphSection animatedStackedGraph\">\n        <div className=\"stackedGraphHeading\">\n          <h2 id=\"part6\">Number of U.S. Mass Shootings per year in relation to:</h2>\n          <select className=\"dropdown\" onChange={onDataChange}>\n            <option value=\"mentalHealth\">motives of individuals suffering from mental health conditions</option>\n            <option value=\"ageGroups\">age groups</option>\n          </select>\n        </div>\n        {\n          stackedDataToView === \"ageGroups\"\n          ?\n          <div>\n            <FilterButtons keysState={ageGroups} \n                            keysArray={ageGroupKeys} \n                            colors={ageGroupColors} \n                            setKeysArray={setAgeGroups} \n                            onCheckboxChange={onCheckboxChange} \n            />\n            <AnimatedStackedBarGraph  stackedBarGraphData={ageGroupData} \n                                    keys={ageGroups}\n                                    colors={ageGroupColors}\n            />\n          </div>\n          :\n          <div>\n            <FilterButtons keysState={mentalIllnesses} \n                            keysArray={mentalHealthKeys} \n                            colors={mentalHealthColors} \n                            setKeysArray={setMentalIllnesses} \n                            onCheckboxChange={onCheckboxChange} \n            />\n            <AnimatedStackedBarGraph  stackedBarGraphData={mentalHealthFrequencies} \n                                      keys={mentalIllnesses}\n                                      colors={mentalHealthColors}\n            />\n          </div>\n        }\n      </article>\n\n      <p id=\"stackGraphContent\" className=\"bodyText\">\n        Among the known motives for mass shootings, a significant number of mass shootings \n        were classified as “acts of terrorism”. Upon further investigation into the summaries \n        of mass shootings categorised as acts of terrorism, we presume that “acts of terrorism” \n        is used as a general classification for mass shootings without a specific motive, as a \n        mass shooting is ultimately considered an act of terrorism, and is thus more than likely \n        to be associated with such a motive.\n\n        <br />\n        <br />\n\n        On the other hand, “psychological factors” takes up the majority of mass shootings when \n        excluding mass shootings with unknown motives. Together with the previous pie chart, this \n        illustrates how prevalent mass shootings involving assailants suffering from mental health \n        illness are.\n      </p>\n\n        <br />\n        <br />\n\n      <h2 id=\"part7\" className=\"bodyHeading\">Who are they?</h2>\n\n      <p className=\"bodyText\">\n        Another factor to consider is the shooter’s age. Among the list of mass shootings, \n        roughly 25% are committed by teenagers, ranging from 12 to 19 years old. Despite gun \n        laws in the USA permitting persons 18 years and above to purchase rifles or shotguns, \n        roughly 65% of teenage shooters are aged 17 and below.\n\n        <br />\n        <br />\n\n        In addition, much can also be said about the accessibility that a legal teenager in the \n        USA has to guns. In the current US climate, the major barrier that exists between gun \n        control and the 16 million new guns that enter the US market is the debate between the \n        constitutional right to bear arms and gun regulation.\n\n        <br />\n        <br />\n\n        Looking back at the graph, a total of roughly 60% of shooters are between 20 to 44 \n        years old. This age group easily takes up the majority of recorded mass shootings from \n        1966 to 2017. We surmise that this age group may possibly have key differentiating \n        factors for occurences of mass shootings. Perhaps many 20 to 44 year olds have just \n        started living on their own, as many tend to move out of their parents’ home at an \n        early age, and may not have the financial means to support themselves, resulting in \n        venting their frustrations in the form of a mass shooting.\n        </p>\n\n      <br />\n      <br />\n\n      <article className=\"pieChartLayout\">\n        <PieChart chartId=\"thirdChart\" chartAlign={\"alignLeft\"} pieChartData={occupationsData} innerRadius={100} outerRadius={150} />\n        <div className=\"pieChartDesc\">\n          <h3 id=\"part7-1\">Percentage of shooters with a background in the military or police force</h3>\n          <p>With psychological factors playing such a large role, we looked into the occupations \n            of shooters, specifically the military and police, as they are most commonly \n            associated with mental and stress issues related to firearms due to post-traumatic \n            stress disorder (PTSD) being a common issue faced by uniformed officers, which may \n            play a role in inciting a current or former uniformed officer into instigating a mass \n            shooting.\n            <br />\n            <br />\n            From the data, we learn that individuals with a military or police background were \n            responsible for 7% of all mass shootings in the USA, based on the data set. \n            <br />\n            <br />\n            However, Barbara Vam Dahlen, the founder of non-profit “Give an Hour”, an organisation \n            that provides counselling and other support to veterans, states that PTSD “creates a \n            risk factor”, but doesn’t necessarily determine whether or not they will initiate a mass \n            shooting. 3 out of 10 of the deadliest mass shootings in the U.S. were performed by people \n            with a military background. As such, it is clear to see that links to the military or \n            police are not a common occurrence in relation to these mass shootings.</p>\n        </div>\n      </article>\n\n      <br/>\n      <br/>\n\n      <h2 id=\"part8\" className=\"bodyHeading\">Conclusion</h2>\n      <p className=\"bodyText\">\n          While the data may imply that the likelihood of gun violence and mass shootings in \n          the USA is influenced by the public accessibility of firearms and the complexity of \n          mental health, the opinions of various readers can greatly differ, even if shown the \n          same data. As such, instead of providing the reader with a definitive answer, below \n          are some of our own speculations regarding the data, for the reader’s consideration, \n          and to make their own judgements:\n\n          <br/>\n          <br/>\n\n          As seen with California and Nevada, a higher number of mass shootings does not \n          necessarily result in a higher rate of injury or fatalities. Additionally, the \n          severity of a mass shooting is heavily dependent on multiple factors.\n\n          <br/>\n          <br/>\n\n          As we observed earlier, the majority of targets tend to either be family members, \n          students, teachers, co-workers, and ex-partners. These are mostly people that one \n          might know well and be fairly close to, giving shooters the opportunity to meet \n          their targets within a closed space; homes, schools, offices, etc.\n\n          <br/>\n          <br/>\n\n          Furthermore, our data has shown that there is a higher percentage of fatalities in \n          closed spaces than in open space, which is likely due to the shooter being in closer \n          proximity to their targets, increasing their chance of fatally wounding the victims, \n          leading to a higher fatality rate.\n\n          <br/>\n          <br/>\n\n          As mentioned previously, it is clear that mass shootings have slowly increased over \n          time, even when excluding the years 2015 and 2016; but we may also need to consider \n          that there are several factors that may have affected this data, as the way that mass \n          shootings and the factors around society could have changed and evolved greatly over \n          the years. Such factors may include the availability and influence of popular media \n          that may have had a dramatic effect on how mass shootings were reported, or adversely \n          the amount of attention it places on both the shooter and victims. Additionally, the \n          evolution of stressing factors to public mental health have greatly evolved since 1967.\n\n          <br/>\n          <br/>\n\n          This is further supported by the fact that the majority of known motives for mass \n          shootings is registered as psychological factors in the shooter, suggesting that the \n          barrier to mental health care is a significant issue faced by many Americans. \n\n          <br/>\n          <br/>\n\n          From the data, we have seen a significant number of minors as the culprits of mass \n          shootings, which begs the question of how they came into possession of firearms that \n          they are not legally allowed to purchase or own. We speculate one possibility could \n          be that parents who own firearms may not have properly secured them, allowing their \n          children to easily acquire a weapon they are in illegal possession of.\n\n          <br/>\n          <br/>\n\n          On the other hand, shooters from older age groups could have numerous more reasons \n          than those mentioned previously. Other than psychological factors, the data shows \n          other possibilities include instigating a mass shooting out of anger, frustration, \n          revenge, racism, domestic disputes and more, leaning toward the idea that many mass \n          shootings come from dissatisfaction from the shooter in their daily lives.</p>\n\n          <br/>\n          <br/>\n\n        <footer>\n          <p>Andrew Aiello | Thomas Lim | Chan Deng Chiew | Nicholas Ho</p>\n        </footer>\n\n    </section>\n  )\n}\n\nexport default App;\n\n","export const formatData = (data, propertyString, valueString) => {\n    const formattedData = {}\n    \n    for (let i = 0; i < data.length; i++) {\n        const property = data[i][propertyString]\n        const value = data[i][valueString]\n        formattedData[property] = +value\n    }\n\n    return formattedData\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mass_shootings.773507f0.csv\";","module.exports = __webpack_public_path__ + \"static/media/culpritDemographics.11227ee2.csv\";","module.exports = __webpack_public_path__ + \"static/media/militaryShooters.ef2a8fae.csv\";","module.exports = __webpack_public_path__ + \"static/media/victimsPerState.1b622d14.csv\";","module.exports = __webpack_public_path__ + \"static/media/targetsFrequency.005a85c2.csv\";","module.exports = __webpack_public_path__ + \"static/media/closeOpenSpaces.1488bc2d.csv\";","module.exports = __webpack_public_path__ + \"static/media/numMassShootings.ad365587.csv\";"],"sourceRoot":""}